name: TimeVault Build

on:
  push:
    branches:
      - main
      - staging
    tags:
      - 'v*'
  pull_request:

jobs:
  build-linux:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Set up Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libgtk-3-dev \
            libayatana-appindicator3-dev \
            librsvg2-dev \
            libsoup-3.0-dev \
            webkit2gtk-4.1 \
            build-essential \
            curl \
            wget \
            file \
            imagemagick \
            icoutils

      - name: Generate Linux icon
        run: |
          # Create icns file from png for Linux (needed for bundling)
          mkdir -p temp.iconset
          # Generate different sizes for icns
          convert src-tauri/icons/icon.png -resize 16x16 temp.iconset/icon_16x16.png
          convert src-tauri/icons/icon.png -resize 32x32 temp.iconset/icon_16x16@2x.png
          convert src-tauri/icons/icon.png -resize 32x32 temp.iconset/icon_32x32.png
          convert src-tauri/icons/icon.png -resize 64x64 temp.iconset/icon_32x32@2x.png
          convert src-tauri/icons/icon.png -resize 128x128 temp.iconset/icon_128x128.png
          convert src-tauri/icons/icon.png -resize 256x256 temp.iconset/icon_128x128@2x.png
          convert src-tauri/icons/icon.png -resize 256x256 temp.iconset/icon_256x256.png
          convert src-tauri/icons/icon.png -resize 512x512 temp.iconset/icon_256x256@2x.png
          convert src-tauri/icons/icon.png -resize 512x512 temp.iconset/icon_512x512.png
          convert src-tauri/icons/icon.png -resize 1024x1024 temp.iconset/icon_512x512@2x.png
          # Create icns file
          icotool -c -o src-tauri/icons/icon.icns temp.iconset/*.png
          rm -rf temp.iconset

      - name: Install Tauri CLI
        run: cargo install tauri-cli --locked

      - name: Install JS dependencies
        run: |
          npm install
          cd vault-frontend
          npm install
          cd ..

      - name: Build frontend
        run: |
          cd vault-frontend
          npm run build
          cd ..

      - name: Verify icon files
        run: |
          echo "Checking icon files..."
          ls -la src-tauri/icons/
          if [ -f "src-tauri/icons/icon.icns" ]; then
            echo "icon.icns exists"
          else
            echo "icon.icns missing"
          fi

      - name: Build Tauri app (Linux)
        run: cargo tauri build

      - name: Debug Linux build
        run: |
          echo "Checking if bundle directory exists..."
          if [ -d "src-tauri/target/release/bundle" ]; then
            echo "Bundle directory exists"
            ls -la src-tauri/target/release/bundle/
          else
            echo "Bundle directory does not exist"
            echo "Checking target/release directory..."
            ls -la src-tauri/target/release/
          fi

      - name: List Linux build artifacts
        run: ls -R src-tauri/target/release/bundle/

      - name: Upload Linux build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: timevault-linux
          path: "src-tauri/target/release/bundle/**/*"

  build-windows:
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Set up Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Install WiX Toolset
        run: |
          # Download and install WiX Toolset v3.11.2
          $url = "https://github.com/wixtoolset/wix3/releases/download/wix3112rtm/wix311.exe"
          $output = "wix311.exe"
          Invoke-WebRequest -Uri $url -OutFile $output
          Start-Process -FilePath $output -ArgumentList "/quiet" -Wait
          # Add WiX to PATH
          $env:PATH += ";C:\Program Files (x86)\WiX Toolset v3.11\bin"
          echo "PATH=$env:PATH" >> $env:GITHUB_ENV

      - name: Generate Windows icon
        run: |
          # Copy existing ico file or create icns for Windows
          if (Test-Path "src-tauri/icons/icon.ico") {
            Copy-Item "src-tauri/icons/icon.ico" "src-tauri/icons/icon.icns"
          } else {
            # Create a simple icns file from png (Windows can use icns format)
            Copy-Item "src-tauri/icons/icon.png" "src-tauri/icons/icon.icns"
          }

      - name: Install Tauri CLI
        run: cargo install tauri-cli --locked

      - name: Install JS dependencies
        run: |
          npm install
          cd vault-frontend
          npm install
          cd ..

      - name: Build frontend
        run: |
          cd vault-frontend
          npm run build
          cd ..

      - name: Verify icon files (Windows)
        run: |
          echo "Checking icon files..."
          dir src-tauri\icons\
          if (Test-Path "src-tauri\icons\icon.icns") {
            echo "icon.icns exists"
          } else {
            echo "icon.icns missing"
          }

      - name: Build Tauri app (Windows)
        run: cargo tauri build -- --target x86_64-pc-windows-msvc

      - name: Debug Windows build
        run: |
          echo "Checking if bundle directory exists..."
          if (Test-Path "src-tauri\target\release\bundle") {
            echo "Bundle directory exists"
            dir src-tauri\target\release\bundle\
          } else {
            echo "Bundle directory does not exist"
            echo "Checking target\release directory..."
            dir src-tauri\target\release\
          }

      - name: List Windows build artifacts
        run: dir src-tauri\target\release\bundle\ /s

      - name: Upload Windows build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: timevault-windows
          path: "src-tauri/target/release/bundle/windows/**/*"

      # - name: Uploading to SignPath for signing
      #   uses: signpath/github-action@v1
      #   with:
      #     organization-id: TimeVault
      #     project-id: ${{ secrets.SIGNPATH_PROJECT_ID }}
      #     api-token: ${{ secrets.SIGNPATH_TOKEN }}
      #     input-artifact-path: src-tauri/target/release/bundle/msi/TimeVault_1.0.1_x64_en-US.msi
      #     signing-policy-slug: default

  build-macos:
    runs-on: macos-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Set up Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Install macOS dependencies
        run: |
          brew install create-dmg

      - name: Generate macOS icon
        run: |
          # Create icns file from png for macOS
          mkdir -p temp.iconset
          # Generate different sizes for icns
          sips -z 16 16 src-tauri/icons/icon.png --out temp.iconset/icon_16x16.png
          sips -z 32 32 src-tauri/icons/icon.png --out temp.iconset/icon_16x16@2x.png
          sips -z 32 32 src-tauri/icons/icon.png --out temp.iconset/icon_32x32.png
          sips -z 64 64 src-tauri/icons/icon.png --out temp.iconset/icon_32x32@2x.png
          sips -z 128 128 src-tauri/icons/icon.png --out temp.iconset/icon_128x128.png
          sips -z 256 256 src-tauri/icons/icon.png --out temp.iconset/icon_128x128@2x.png
          sips -z 256 256 src-tauri/icons/icon.png --out temp.iconset/icon_256x256.png
          sips -z 512 512 src-tauri/icons/icon.png --out temp.iconset/icon_256x256@2x.png
          sips -z 512 512 src-tauri/icons/icon.png --out temp.iconset/icon_512x512.png
          sips -z 1024 1024 src-tauri/icons/icon.png --out temp.iconset/icon_512x512@2x.png
          # Create icns file
          iconutil -c icns temp.iconset -o src-tauri/icons/icon.icns
          rm -rf temp.iconset

      - name: Install Tauri CLI
        run: cargo install tauri-cli --locked

      - name: Install JS dependencies
        run: |
          npm install
          cd vault-frontend
          npm install
          cd ..

      - name: Build frontend
        run: |
          cd vault-frontend
          npm run build
          cd ..

      - name: Verify icon files (macOS)
        run: |
          echo "Checking icon files..."
          ls -la src-tauri/icons/
          if [ -f "src-tauri/icons/icon.icns" ]; then
            echo "icon.icns exists"
          else
            echo "icon.icns missing"
          fi

      - name: Build Tauri app (macOS)
        run: cargo tauri build

      - name: Debug macOS build
        run: |
          echo "Checking if bundle directory exists..."
          if [ -d "src-tauri/target/release/bundle" ]; then
            echo "Bundle directory exists"
            ls -la src-tauri/target/release/bundle/
          else
            echo "Bundle directory does not exist"
            echo "Checking target/release directory..."
            ls -la src-tauri/target/release/
          fi

      - name: List macOS build artifacts
        run: ls -R src-tauri/target/release/bundle/

      - name: Upload macOS build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: timevault-macos
          path: "src-tauri/target/release/bundle/**/*"

  release:
    needs: [build-linux, build-windows, build-macos]
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    steps:
      - name: Download Linux build artifacts
        uses: actions/download-artifact@v4
        with:
          name: timevault-linux
          path: dist/linux

      - name: Download Windows build artifacts
        uses: actions/download-artifact@v4
        with:
          name: timevault-windows
          path: dist/windows

      - name: Download macOS build artifacts
        uses: actions/download-artifact@v4
        with:
          name: timevault-macos
          path: dist/macos

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          name: "TimeVault ${{ github.ref_name }}"
          body: "Automated release for version ${{ github.ref_name }}."
          draft: false
          prerelease: false
          files: |
            dist/linux/**
            dist/windows/**
            dist/macos/**
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
